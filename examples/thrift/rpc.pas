(**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit rpc;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport;

const
  crpc_Option_AnsiStr_Binary = False;
type
  TControlRemoteWindowProtocol = class
  public
    type
      Iface = interface
        procedure ResizeWindow(Width: Integer; Height: Integer);
      end;

      TClient = class( TInterfacedObject, Iface)
      public
        constructor Create( prot: IProtocol); overload;
        constructor Create( const iprot: IProtocol; const oprot: IProtocol); overload;
      protected
        iprot_: IProtocol;
        oprot_: IProtocol;
        seqid_: Integer;
      public
        property InputProtocol: IProtocol read iprot_;
        property OutputProtocol: IProtocol read oprot_;
      protected
        // Iface
        procedure ResizeWindow(Width: Integer; Height: Integer);
      public
        procedure send_ResizeWindow(Width: Integer; Height: Integer);
        procedure recv_ResizeWindow();
      end;

      TProcessorImpl = class( TInterfacedObject, IProcessor)
      public
        constructor Create( iface_: Iface );
        destructor Destroy; override;
      private
        iface_: Iface;
      protected
        type
          TProcessFunction = reference to procedure( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      protected
        processMap_: IThriftDictionary<string, TProcessFunction>;
      public
        function Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
        procedure ResizeWindow_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      end;

      IResizeWindow_args = interface(IBase)
        function GetWidth: Integer;
        procedure SetWidth( const Value: Integer);
        function GetHeight: Integer;
        procedure SetHeight( const Value: Integer);

        property Width: Integer read GetWidth write SetWidth;
        property Height: Integer read GetHeight write SetHeight;

        function Get__isset_Width: Boolean;
        function Get__isset_Height: Boolean;

        property __isset_Width: Boolean read Get__isset_Width;
        property __isset_Height: Boolean read Get__isset_Height;
      end;

      TResizeWindow_argsImpl = class(TInterfacedObject, IBase, IResizeWindow_args)
      private
        FWidth: Integer;
        FHeight: Integer;
        
        F__isset_Width: Boolean;
        F__isset_Height: Boolean;
        
        function GetWidth: Integer;
        procedure SetWidth( const Value: Integer);
        function GetHeight: Integer;
        procedure SetHeight( const Value: Integer);

        function Get__isset_Width: Boolean;
        function Get__isset_Height: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Width: Integer read GetWidth write SetWidth;
        property Height: Integer read GetHeight write SetHeight;

        // isset
        property __isset_Width: Boolean read Get__isset_Width;
        property __isset_Height: Boolean read Get__isset_Height;
      end;

      IResizeWindow_result = interface(IBase)
      end;

      TResizeWindow_resultImpl = class(TInterfacedObject, IBase, IResizeWindow_result)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

  end;
  
  TRemoteWindowNotificationProtocol = class
  public
    type
      Iface = interface
        procedure Handshake(const Name: string);
        procedure NotifyWindowPositionChanged(X: Integer; Y: Integer);
        procedure NotifyWindowSizeChanged(NewWidth: Integer; NewHeight: Integer);
        procedure ReportSystemInformation(const CPU: Double; MemoryUsed: Integer);
      end;

      TClient = class( TInterfacedObject, Iface)
      public
        constructor Create( prot: IProtocol); overload;
        constructor Create( const iprot: IProtocol; const oprot: IProtocol); overload;
      protected
        iprot_: IProtocol;
        oprot_: IProtocol;
        seqid_: Integer;
      public
        property InputProtocol: IProtocol read iprot_;
        property OutputProtocol: IProtocol read oprot_;
      protected
        // Iface
        procedure Handshake(const Name: string);
        procedure NotifyWindowPositionChanged(X: Integer; Y: Integer);
        procedure NotifyWindowSizeChanged(NewWidth: Integer; NewHeight: Integer);
        procedure ReportSystemInformation(const CPU: Double; MemoryUsed: Integer);
      public
        procedure send_Handshake(const Name: string);
        procedure recv_Handshake();
        procedure send_NotifyWindowPositionChanged(X: Integer; Y: Integer);
        procedure send_NotifyWindowSizeChanged(NewWidth: Integer; NewHeight: Integer);
        procedure send_ReportSystemInformation(const CPU: Double; MemoryUsed: Integer);
      end;

      TProcessorImpl = class( TInterfacedObject, IProcessor)
      public
        constructor Create( iface_: Iface );
        destructor Destroy; override;
      private
        iface_: Iface;
      protected
        type
          TProcessFunction = reference to procedure( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      protected
        processMap_: IThriftDictionary<string, TProcessFunction>;
      public
        function Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
        procedure Handshake_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure NotifyWindowPositionChanged_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure NotifyWindowSizeChanged_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure ReportSystemInformation_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      end;

      IHandshake_args = interface(IBase)
        function GetName: string;
        procedure SetName( const Value: string);

        property Name: string read GetName write SetName;

        function Get__isset_Name: Boolean;

        property __isset_Name: Boolean read Get__isset_Name;
      end;

      THandshake_argsImpl = class(TInterfacedObject, IBase, IHandshake_args)
      private
        FName: string;
        
        F__isset_Name: Boolean;
        
        function GetName: string;
        procedure SetName( const Value: string);

        function Get__isset_Name: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Name: string read GetName write SetName;

        // isset
        property __isset_Name: Boolean read Get__isset_Name;
      end;

      IHandshake_result = interface(IBase)
      end;

      THandshake_resultImpl = class(TInterfacedObject, IBase, IHandshake_result)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

      INotifyWindowPositionChanged_args = interface(IBase)
        function GetX: Integer;
        procedure SetX( const Value: Integer);
        function GetY: Integer;
        procedure SetY( const Value: Integer);

        property X: Integer read GetX write SetX;
        property Y: Integer read GetY write SetY;

        function Get__isset_X: Boolean;
        function Get__isset_Y: Boolean;

        property __isset_X: Boolean read Get__isset_X;
        property __isset_Y: Boolean read Get__isset_Y;
      end;

      TNotifyWindowPositionChanged_argsImpl = class(TInterfacedObject, IBase, INotifyWindowPositionChanged_args)
      private
        FX: Integer;
        FY: Integer;
        
        F__isset_X: Boolean;
        F__isset_Y: Boolean;
        
        function GetX: Integer;
        procedure SetX( const Value: Integer);
        function GetY: Integer;
        procedure SetY( const Value: Integer);

        function Get__isset_X: Boolean;
        function Get__isset_Y: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property X: Integer read GetX write SetX;
        property Y: Integer read GetY write SetY;

        // isset
        property __isset_X: Boolean read Get__isset_X;
        property __isset_Y: Boolean read Get__isset_Y;
      end;

      INotifyWindowSizeChanged_args = interface(IBase)
        function GetNewWidth: Integer;
        procedure SetNewWidth( const Value: Integer);
        function GetNewHeight: Integer;
        procedure SetNewHeight( const Value: Integer);

        property NewWidth: Integer read GetNewWidth write SetNewWidth;
        property NewHeight: Integer read GetNewHeight write SetNewHeight;

        function Get__isset_NewWidth: Boolean;
        function Get__isset_NewHeight: Boolean;

        property __isset_NewWidth: Boolean read Get__isset_NewWidth;
        property __isset_NewHeight: Boolean read Get__isset_NewHeight;
      end;

      TNotifyWindowSizeChanged_argsImpl = class(TInterfacedObject, IBase, INotifyWindowSizeChanged_args)
      private
        FNewWidth: Integer;
        FNewHeight: Integer;
        
        F__isset_NewWidth: Boolean;
        F__isset_NewHeight: Boolean;
        
        function GetNewWidth: Integer;
        procedure SetNewWidth( const Value: Integer);
        function GetNewHeight: Integer;
        procedure SetNewHeight( const Value: Integer);

        function Get__isset_NewWidth: Boolean;
        function Get__isset_NewHeight: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property NewWidth: Integer read GetNewWidth write SetNewWidth;
        property NewHeight: Integer read GetNewHeight write SetNewHeight;

        // isset
        property __isset_NewWidth: Boolean read Get__isset_NewWidth;
        property __isset_NewHeight: Boolean read Get__isset_NewHeight;
      end;

      IReportSystemInformation_args = interface(IBase)
        function GetCPU: Double;
        procedure SetCPU( const Value: Double);
        function GetMemoryUsed: Integer;
        procedure SetMemoryUsed( const Value: Integer);

        property CPU: Double read GetCPU write SetCPU;
        property MemoryUsed: Integer read GetMemoryUsed write SetMemoryUsed;

        function Get__isset_CPU: Boolean;
        function Get__isset_MemoryUsed: Boolean;

        property __isset_CPU: Boolean read Get__isset_CPU;
        property __isset_MemoryUsed: Boolean read Get__isset_MemoryUsed;
      end;

      TReportSystemInformation_argsImpl = class(TInterfacedObject, IBase, IReportSystemInformation_args)
      private
        FCPU: Double;
        FMemoryUsed: Integer;
        
        F__isset_CPU: Boolean;
        F__isset_MemoryUsed: Boolean;
        
        function GetCPU: Double;
        procedure SetCPU( const Value: Double);
        function GetMemoryUsed: Integer;
        procedure SetMemoryUsed( const Value: Integer);

        function Get__isset_CPU: Boolean;
        function Get__isset_MemoryUsed: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property CPU: Double read GetCPU write SetCPU;
        property MemoryUsed: Integer read GetMemoryUsed write SetMemoryUsed;

        // isset
        property __isset_CPU: Boolean read Get__isset_CPU;
        property __isset_MemoryUsed: Boolean read Get__isset_MemoryUsed;
      end;

  end;
  
implementation

constructor TControlRemoteWindowProtocol.TClient.Create( prot: IProtocol);
begin
  Create( prot, prot );
end;

constructor TControlRemoteWindowProtocol.TClient.Create( const iprot: IProtocol; const oprot: IProtocol);
begin
  iprot_ := iprot;
  oprot_ := oprot;
end;

procedure TControlRemoteWindowProtocol.TClient.ResizeWindow(Width: Integer; Height: Integer);
begin
  send_ResizeWindow(Width, Height);
  recv_ResizeWindow();
end;

procedure TControlRemoteWindowProtocol.TClient.send_ResizeWindow(Width: Integer; Height: Integer);
var
  args : IResizeWindow_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('ResizeWindow', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TResizeWindow_argsImpl.Create();
  args.Width := Width;
  args.Height := Height;
  args.Write(oprot_);
  args.Width := 0;
  args.Height := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TControlRemoteWindowProtocol.TClient.recv_ResizeWindow();
var
  msg : IMessage;
  x : TApplicationException;
  ret : IResizeWindow_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = TMessageType.Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := TResizeWindow_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
end;

constructor TControlRemoteWindowProtocol.TProcessorImpl.Create( iface_: Iface );
begin
  inherited Create;
  Self.iface_ := iface_;
  processMap_ := TThriftDictionaryImpl<string, TProcessFunction>.Create;
  processMap_.AddOrSetValue( 'ResizeWindow', ResizeWindow_Process);
end;

destructor TControlRemoteWindowProtocol.TProcessorImpl.Destroy;
begin
  inherited;
end;

function TControlRemoteWindowProtocol.TProcessorImpl.Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
var
  msg : IMessage;
  fn : TProcessFunction;
  x : TApplicationException;
begin
  try
    msg := iprot.ReadMessageBegin();
    fn := nil;
    if not processMap_.TryGetValue(msg.Name, fn)
    or not Assigned(fn) then
    begin
      TProtocolUtil.Skip(iprot, TType.Struct);
      iprot.ReadMessageEnd();
      x := TApplicationException.Create(TApplicationException.TExceptionType.UnknownMethod, 'Invalid method name: ''' + msg.Name + '''');
      msg := TMessageImpl.Create(msg.Name, TMessageType.Exception, msg.SeqID);
      oprot.WriteMessageBegin( msg);
      x.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
      Result := True;
      Exit;
    end;
    fn(msg.SeqID, iprot, oprot);
  except
    Result := False;
    Exit;
  end;
  Result := True;
end;

// both way processor
procedure TControlRemoteWindowProtocol.TProcessorImpl.ResizeWindow_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IResizeWindow_args;
  msg: IMessage;
  ret: IResizeWindow_result;
begin
  args := TResizeWindow_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TResizeWindow_resultImpl.Create;
  iface_.ResizeWindow(args.Width, args.Height);
  args.Width := 0;
  args.Height := 0;
  msg := TMessageImpl.Create('ResizeWindow', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

constructor TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Create;
begin
  inherited;
end;

destructor TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Destroy;
begin
  inherited;
end;

function TControlRemoteWindowProtocol.TResizeWindow_argsImpl.GetWidth: Integer;
begin
  Result := FWidth;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_argsImpl.SetWidth( const Value: Integer);
begin
  F__isset_Width := True;
  FWidth := Value;
end;

function TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Get__isset_Width: Boolean;
begin
  Result := F__isset_Width;
end;

function TControlRemoteWindowProtocol.TResizeWindow_argsImpl.GetHeight: Integer;
begin
  Result := FHeight;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_argsImpl.SetHeight( const Value: Integer);
begin
  F__isset_Height := True;
  FHeight := Value;
end;

function TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Get__isset_Height: Boolean;
begin
  Result := F__isset_Height;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I32) then
          begin
            Width := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I32) then
          begin
            Height := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('ResizeWindow_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Width) then
  begin
    field_.Name := 'Width';
    field_.Type_  := TType.I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Width);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Height) then
  begin
    field_.Name := 'Height';
    field_.Type_  := TType.I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Height);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TControlRemoteWindowProtocol.TResizeWindow_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Width: ');
    sb.Append(Width);
    sb.Append(',Height: ');
    sb.Append(Height);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TControlRemoteWindowProtocol.TResizeWindow_resultImpl.Create;
begin
  inherited;
end;

destructor TControlRemoteWindowProtocol.TResizeWindow_resultImpl.Destroy;
begin
  inherited;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TControlRemoteWindowProtocol.TResizeWindow_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
begin
  struc := TStructImpl.Create('ResizeWindow_result');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TControlRemoteWindowProtocol.TResizeWindow_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TRemoteWindowNotificationProtocol.TClient.Create( prot: IProtocol);
begin
  Create( prot, prot );
end;

constructor TRemoteWindowNotificationProtocol.TClient.Create( const iprot: IProtocol; const oprot: IProtocol);
begin
  iprot_ := iprot;
  oprot_ := oprot;
end;

procedure TRemoteWindowNotificationProtocol.TClient.Handshake(const Name: string);
begin
  send_Handshake(Name);
  recv_Handshake();
end;

procedure TRemoteWindowNotificationProtocol.TClient.send_Handshake(const Name: string);
var
  args : IHandshake_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('Handshake', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := THandshake_argsImpl.Create();
  args.Name := Name;
  args.Write(oprot_);
  args.Name := '';
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TRemoteWindowNotificationProtocol.TClient.recv_Handshake();
var
  msg : IMessage;
  x : TApplicationException;
  ret : IHandshake_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = TMessageType.Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := THandshake_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
end;

procedure TRemoteWindowNotificationProtocol.TClient.NotifyWindowPositionChanged(X: Integer; Y: Integer);
begin
  send_NotifyWindowPositionChanged(X, Y);
end;

procedure TRemoteWindowNotificationProtocol.TClient.send_NotifyWindowPositionChanged(X: Integer; Y: Integer);
var
  args : INotifyWindowPositionChanged_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('NotifyWindowPositionChanged', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TNotifyWindowPositionChanged_argsImpl.Create();
  args.X := X;
  args.Y := Y;
  args.Write(oprot_);
  args.X := 0;
  args.Y := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TRemoteWindowNotificationProtocol.TClient.NotifyWindowSizeChanged(NewWidth: Integer; NewHeight: Integer);
begin
  send_NotifyWindowSizeChanged(NewWidth, NewHeight);
end;

procedure TRemoteWindowNotificationProtocol.TClient.send_NotifyWindowSizeChanged(NewWidth: Integer; NewHeight: Integer);
var
  args : INotifyWindowSizeChanged_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('NotifyWindowSizeChanged', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TNotifyWindowSizeChanged_argsImpl.Create();
  args.NewWidth := NewWidth;
  args.NewHeight := NewHeight;
  args.Write(oprot_);
  args.NewWidth := 0;
  args.NewHeight := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TRemoteWindowNotificationProtocol.TClient.ReportSystemInformation(const CPU: Double; MemoryUsed: Integer);
begin
  send_ReportSystemInformation(CPU, MemoryUsed);
end;

procedure TRemoteWindowNotificationProtocol.TClient.send_ReportSystemInformation(const CPU: Double; MemoryUsed: Integer);
var
  args : IReportSystemInformation_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('ReportSystemInformation', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TReportSystemInformation_argsImpl.Create();
  args.CPU := CPU;
  args.MemoryUsed := MemoryUsed;
  args.Write(oprot_);
  args.CPU := 0.0;
  args.MemoryUsed := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

constructor TRemoteWindowNotificationProtocol.TProcessorImpl.Create( iface_: Iface );
begin
  inherited Create;
  Self.iface_ := iface_;
  processMap_ := TThriftDictionaryImpl<string, TProcessFunction>.Create;
  processMap_.AddOrSetValue( 'Handshake', Handshake_Process);
  processMap_.AddOrSetValue( 'NotifyWindowPositionChanged', NotifyWindowPositionChanged_Process);
  processMap_.AddOrSetValue( 'NotifyWindowSizeChanged', NotifyWindowSizeChanged_Process);
  processMap_.AddOrSetValue( 'ReportSystemInformation', ReportSystemInformation_Process);
end;

destructor TRemoteWindowNotificationProtocol.TProcessorImpl.Destroy;
begin
  inherited;
end;

function TRemoteWindowNotificationProtocol.TProcessorImpl.Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
var
  msg : IMessage;
  fn : TProcessFunction;
  x : TApplicationException;
begin
  try
    msg := iprot.ReadMessageBegin();
    fn := nil;
    if not processMap_.TryGetValue(msg.Name, fn)
    or not Assigned(fn) then
    begin
      TProtocolUtil.Skip(iprot, TType.Struct);
      iprot.ReadMessageEnd();
      x := TApplicationException.Create(TApplicationException.TExceptionType.UnknownMethod, 'Invalid method name: ''' + msg.Name + '''');
      msg := TMessageImpl.Create(msg.Name, TMessageType.Exception, msg.SeqID);
      oprot.WriteMessageBegin( msg);
      x.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
      Result := True;
      Exit;
    end;
    fn(msg.SeqID, iprot, oprot);
  except
    Result := False;
    Exit;
  end;
  Result := True;
end;

// both way processor
procedure TRemoteWindowNotificationProtocol.TProcessorImpl.Handshake_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IHandshake_args;
  msg: IMessage;
  ret: IHandshake_result;
begin
  args := THandshake_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := THandshake_resultImpl.Create;
  iface_.Handshake(args.Name);
  args.Name := '';
  msg := TMessageImpl.Create('Handshake', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// one way processor
procedure TRemoteWindowNotificationProtocol.TProcessorImpl.NotifyWindowPositionChanged_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: INotifyWindowPositionChanged_args;
begin
  args := TNotifyWindowPositionChanged_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  iface_.NotifyWindowPositionChanged(args.X, args.Y);
  args.X := 0;
  args.Y := 0;
end;

// one way processor
procedure TRemoteWindowNotificationProtocol.TProcessorImpl.NotifyWindowSizeChanged_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: INotifyWindowSizeChanged_args;
begin
  args := TNotifyWindowSizeChanged_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  iface_.NotifyWindowSizeChanged(args.NewWidth, args.NewHeight);
  args.NewWidth := 0;
  args.NewHeight := 0;
end;

// one way processor
procedure TRemoteWindowNotificationProtocol.TProcessorImpl.ReportSystemInformation_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IReportSystemInformation_args;
begin
  args := TReportSystemInformation_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  iface_.ReportSystemInformation(args.CPU, args.MemoryUsed);
  args.CPU := 0.0;
  args.MemoryUsed := 0;
end;

constructor TRemoteWindowNotificationProtocol.THandshake_argsImpl.Create;
begin
  inherited;
end;

destructor TRemoteWindowNotificationProtocol.THandshake_argsImpl.Destroy;
begin
  inherited;
end;

function TRemoteWindowNotificationProtocol.THandshake_argsImpl.GetName: string;
begin
  Result := FName;
end;

procedure TRemoteWindowNotificationProtocol.THandshake_argsImpl.SetName( const Value: string);
begin
  F__isset_Name := True;
  FName := Value;
end;

function TRemoteWindowNotificationProtocol.THandshake_argsImpl.Get__isset_Name: Boolean;
begin
  Result := F__isset_Name;
end;

procedure TRemoteWindowNotificationProtocol.THandshake_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            Name := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TRemoteWindowNotificationProtocol.THandshake_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('Handshake_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Name) then
  begin
    field_.Name := 'Name';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Name);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TRemoteWindowNotificationProtocol.THandshake_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Name: ');
    sb.Append(Name);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TRemoteWindowNotificationProtocol.THandshake_resultImpl.Create;
begin
  inherited;
end;

destructor TRemoteWindowNotificationProtocol.THandshake_resultImpl.Destroy;
begin
  inherited;
end;

procedure TRemoteWindowNotificationProtocol.THandshake_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TRemoteWindowNotificationProtocol.THandshake_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
begin
  struc := TStructImpl.Create('Handshake_result');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TRemoteWindowNotificationProtocol.THandshake_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Create;
begin
  inherited;
end;

destructor TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Destroy;
begin
  inherited;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.GetX: Integer;
begin
  Result := FX;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.SetX( const Value: Integer);
begin
  F__isset_X := True;
  FX := Value;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Get__isset_X: Boolean;
begin
  Result := F__isset_X;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.GetY: Integer;
begin
  Result := FY;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.SetY( const Value: Integer);
begin
  F__isset_Y := True;
  FY := Value;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Get__isset_Y: Boolean;
begin
  Result := F__isset_Y;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I32) then
          begin
            X := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I32) then
          begin
            Y := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('NotifyWindowPositionChanged_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_X) then
  begin
    field_.Name := 'X';
    field_.Type_  := TType.I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(X);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Y) then
  begin
    field_.Name := 'Y';
    field_.Type_  := TType.I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Y);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowPositionChanged_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('X: ');
    sb.Append(X);
    sb.Append(',Y: ');
    sb.Append(Y);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Create;
begin
  inherited;
end;

destructor TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Destroy;
begin
  inherited;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.GetNewWidth: Integer;
begin
  Result := FNewWidth;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.SetNewWidth( const Value: Integer);
begin
  F__isset_NewWidth := True;
  FNewWidth := Value;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Get__isset_NewWidth: Boolean;
begin
  Result := F__isset_NewWidth;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.GetNewHeight: Integer;
begin
  Result := FNewHeight;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.SetNewHeight( const Value: Integer);
begin
  F__isset_NewHeight := True;
  FNewHeight := Value;
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Get__isset_NewHeight: Boolean;
begin
  Result := F__isset_NewHeight;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I32) then
          begin
            NewWidth := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I32) then
          begin
            NewHeight := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('NotifyWindowSizeChanged_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_NewWidth) then
  begin
    field_.Name := 'NewWidth';
    field_.Type_  := TType.I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(NewWidth);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NewHeight) then
  begin
    field_.Name := 'NewHeight';
    field_.Type_  := TType.I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(NewHeight);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TRemoteWindowNotificationProtocol.TNotifyWindowSizeChanged_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('NewWidth: ');
    sb.Append(NewWidth);
    sb.Append(',NewHeight: ');
    sb.Append(NewHeight);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Create;
begin
  inherited;
end;

destructor TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Destroy;
begin
  inherited;
end;

function TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.GetCPU: Double;
begin
  Result := FCPU;
end;

procedure TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.SetCPU( const Value: Double);
begin
  F__isset_CPU := True;
  FCPU := Value;
end;

function TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Get__isset_CPU: Boolean;
begin
  Result := F__isset_CPU;
end;

function TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.GetMemoryUsed: Integer;
begin
  Result := FMemoryUsed;
end;

procedure TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.SetMemoryUsed( const Value: Integer);
begin
  F__isset_MemoryUsed := True;
  FMemoryUsed := Value;
end;

function TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Get__isset_MemoryUsed: Boolean;
begin
  Result := F__isset_MemoryUsed;
end;

procedure TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.Double_) then
          begin
            CPU := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I32) then
          begin
            MemoryUsed := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('ReportSystemInformation_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CPU) then
  begin
    field_.Name := 'CPU';
    field_.Type_  := TType.Double_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(CPU);
    oprot.WriteFieldEnd();
  end;
  if (__isset_MemoryUsed) then
  begin
    field_.Name := 'MemoryUsed';
    field_.Type_  := TType.I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(MemoryUsed);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TRemoteWindowNotificationProtocol.TReportSystemInformation_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('CPU: ');
    sb.Append(CPU);
    sb.Append(',MemoryUsed: ');
    sb.Append(MemoryUsed);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;


initialization

finalization


end.
